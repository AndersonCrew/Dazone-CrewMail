package com.dazone.crewemail.fragments;import static com.dazone.crewemail.utils.Statics.TIME_DELAY_LOAD_MORE;import android.os.Bundle;import android.os.Handler;import android.text.Editable;import android.text.TextWatcher;import android.util.Log;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.EditText;import android.widget.LinearLayout;import androidx.core.content.ContextCompat;import androidx.recyclerview.widget.DividerItemDecoration;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.dazone.crewemail.R;import com.dazone.crewemail.adapter.ContactsAdapter;import com.dazone.crewemail.data.ContactObj;import com.dazone.crewemail.data.ErrorData;import com.dazone.crewemail.data.EventRequest;import com.dazone.crewemail.data.ListContact;import com.dazone.crewemail.data.PersonData;import com.dazone.crewemail.interfaces.ItemClickListener;import com.dazone.crewemail.interfaces.OnGetContact;import com.dazone.crewemail.utils.Util;import com.dazone.crewemail.webservices.HttpRequest;import org.greenrobot.eventbus.EventBus;import java.util.ArrayList;import java.util.List;import io.realm.Realm;import io.realm.RealmResults;public class ContactFragment extends BaseFragment implements View.OnClickListener, ContactsAdapter.OnLoadMoreListener, ItemClickListener, TextWatcher {    private View mView;    private RecyclerView mRcvContact;    private EditText mEdtSearch;    private ContactsAdapter mAdapter;    private List<ContactObj> mListContact;    private int mLimit = 10, mPage = 1;    private ArrayList<PersonData> selectedPersonList = new ArrayList<>();    private int type;    private Handler mHandler = new Handler();    private String mSearchKey = "";    private LinearLayout mLEmpty, mLoading;    private boolean endList;    private Realm mRealm;    public static ContactFragment newInstance(int type) {        ContactFragment fragmentV2 = new ContactFragment();        Bundle data = new Bundle();        data.putInt("KEY_TYPE", type);        fragmentV2.setArguments(data);        return fragmentV2;    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        if (getArguments() != null) {            type = getArguments().getInt("KEY_TYPE");        }        setHasOptionsMenu(true);    }    private void isLocal() {        if (!mRealm.isInTransaction()) {            mRealm.beginTransaction();        }        if (!Util.isNetworkAvailable()) {            RealmResults<ContactObj> r1 = mRealm.where(ContactObj.class).findAll();            if (mLEmpty != null) {                mLoading.setVisibility(View.GONE);            }            mListContact.clear();            mListContact.addAll(r1);            mAdapter.notifyDataSetChanged();            Log.d("sssDebugRealm", r1.toString());        } else {            mRealm.delete(ContactObj.class);            mRealm.commitTransaction();        }    }    private void inItView() {        inItRecycle();        loadDataSever();    }    private void inItRecycle() {        mListContact = new ArrayList<>();        setUpRcv();    }    private void loadDataSever() {        HttpRequest.getInstance().getContacts(new OnGetContact() {            @Override            public void onGetOnGetContactSuccess(ListContact list) {                if (mLEmpty != null) {                    mLoading.setVisibility(View.GONE);                }                setDataRecycleView(list.getListContact());                if (!mRealm.isInTransaction()) {                    mRealm.beginTransaction();                }                mRealm.insert(list.getListContact());                mRealm.commitTransaction();            }            @Override            public void onGetOnGetContactFail(ErrorData errorData) {                if (mLEmpty != null) {                    mLoading.setVisibility(View.GONE);                }            }        }, mPage, mLimit, mSearchKey);    }    private void loadMoreData() {        if (!endList) {            HttpRequest.getInstance().getContacts(new OnGetContact() {                @Override                public void onGetOnGetContactSuccess(ListContact list) {                    if (list.getListContact().size() > 0) {                        onSearchResponse(list.getListContact());                    } else {                        endList = true;                    }                }                @Override                public void onGetOnGetContactFail(ErrorData errorData) {                }            }, mPage, mLimit, mSearchKey);        }    }    private void loadSearchData() {        HttpRequest.getInstance().getContacts(new OnGetContact() {            @Override            public void onGetOnGetContactSuccess(ListContact list) {                onSearchResponse(list.getListContact());            }            @Override            public void onGetOnGetContactFail(ErrorData errorData) {            }        }, mPage, mLimit, mSearchKey);    }    private void onSearchResponse(ArrayList<ContactObj> mListC) {        if (mPage == 1) {            mListContact.clear();        }        mListContact.addAll(mListC);        if (mRealm.isInTransaction()) {            mRealm.insert(mListC);        } else {            mRealm.beginTransaction();            mRealm.insert(mListC);        }        if (mListContact.size() == 0) {            setEmptyDataView();        } else {            hasDataView();            mAdapter.notifyDataSetChanged();            mAdapter.setLoaded();        }    }    private void hasDataView() {        if (mLEmpty != null) {            mLEmpty.setVisibility(View.GONE);        }    }    private void setEmptyDataView() {        if (mLEmpty != null) {            mLEmpty.setVisibility(View.VISIBLE);        }    }    private void setUpRcv() {        if (mRcvContact != null) {            RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(getContext());            mRcvContact.setLayoutManager(layoutManager);            DividerItemDecoration divider = new DividerItemDecoration(mRcvContact.getContext(), DividerItemDecoration.VERTICAL);            divider.setDrawable(ContextCompat.getDrawable(getContext(), R.drawable.custom_devider_recycle_view));            mRcvContact.addItemDecoration(divider);            mAdapter = new ContactsAdapter(getContext(), mRcvContact, mListContact, 0);            mAdapter.setItemClickListener(this);            mRcvContact.setAdapter(mAdapter);            mAdapter.setOnLoadMoreListener(this);        }    }    private void setDataRecycleView(ArrayList<ContactObj> mListC) {        if (mPage == 1) {            mListContact.clear();        }        mListContact.addAll(mListC);        if (mListContact.size() == 0) {        } else {            mAdapter.notifyDataSetChanged();            mAdapter.setLoaded();        }    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        mView = inflater.inflate(R.layout.fragment_contact, container, false);        mRcvContact = mView.findViewById(R.id.rcv_contact);        mEdtSearch = mView.findViewById(R.id.edtSearch);        mLEmpty = mView.findViewById(R.id.ln_fail);        mLoading = mView.findViewById(R.id.ln_loading);        mLoading.setVisibility(View.VISIBLE);        mEdtSearch.addTextChangedListener(this);        mRealm = Realm.getDefaultInstance();        inItView();        isLocal();        return mView;    }    @Override    public void onClick(View v) {        int id = v.getId();        switch (id) {        }    }    @Override    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {        inflater.inflate(R.menu.check_menu, menu);    }    @Override    public void onLoadMore() {        mListContact.add(null);        mAdapter.notifyItemInserted(mListContact.size() - 1);        new Handler().postDelayed(() -> {            mListContact.remove(mListContact.size() - 1);            mAdapter.notifyItemRemoved(mListContact.size());            mPage++;            loadMoreData();        }, TIME_DELAY_LOAD_MORE);    }    @Override    public void onClick(View view, int pos, boolean isCheck) {        PersonData Mp = new PersonData();        Mp.setFullName(mListContact.get(pos).getFirstName());        Mp.setEmail(mListContact.get(pos).getEmail());        if (!selectedPersonList.contains(Mp) && isCheck) {            selectedPersonList.add(Mp);        } else if (!isCheck) {            selectedPersonList.remove(Mp);        }    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case R.id.menu_check:                EventRequest eventRequest = new EventRequest();                eventRequest.setDatas(selectedPersonList);                eventRequest.setType(type);                EventBus.getDefault().post(eventRequest);                getActivity().finish();                break;        }        return true;    }    @Override    public void beforeTextChanged(CharSequence s, int start, int count, int after) {    }    @Override    public void onTextChanged(CharSequence s, int start, int before, int count) {    }    @Override    public void afterTextChanged(Editable s) {        searchEvent();    }    private void searchEvent() {        endList = false;        mSearchKey = mEdtSearch.getText().toString().replaceAll("\\s+$", "");        mHandler.removeCallbacks(mFilterTask);        mHandler.postDelayed(mFilterTask, 150);    }    Runnable mFilterTask = () -> {        mPage = 1;        loadSearchData();    };}