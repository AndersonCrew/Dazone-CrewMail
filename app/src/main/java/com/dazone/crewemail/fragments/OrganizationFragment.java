package com.dazone.crewemail.fragments;import android.content.Context;import android.os.AsyncTask;import android.os.Bundle;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.text.TextUtils;import android.util.Log;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.view.inputmethod.EditorInfo;import android.view.inputmethod.InputMethodManager;import android.widget.EditText;import android.widget.ProgressBar;import android.widget.TextView;import com.dazone.crewemail.DaZoneApplication;import com.dazone.crewemail.R;import com.dazone.crewemail.adapter.AdapterOrganizationChart;import com.dazone.crewemail.data.ErrorData;import com.dazone.crewemail.data.EventRequest;import com.dazone.crewemail.data.PersonData;import com.dazone.crewemail.database.OrganizationUserDBHelper;import com.dazone.crewemail.database.ServerSiteDBHelper;import com.dazone.crewemail.dto.ob_belongs;import com.dazone.crewemail.interfaces.CheckUpdateDepartmentListener;import com.dazone.crewemail.interfaces.OnGetAllOfUser;import com.dazone.crewemail.interfaces.OnOrganizationSelectedEvent;import com.dazone.crewemail.utils.Prefs;import com.dazone.crewemail.utils.Util;import com.dazone.crewemail.webservices.HttpRequest;import org.greenrobot.eventbus.EventBus;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.Iterator;import java.util.List;import java.util.Set;import java.util.TreeSet;import static com.dazone.crewemail.webservices.HttpRequest.sRootLink;/** * Created by dazone on 6/1/2017. */public class OrganizationFragment extends BaseFragment implements View.OnClickListener, OnOrganizationSelectedEvent {    public boolean isSearching = false;    private View mView;    private TextView sharedPersonTv, tvCompany, tvSearch, text_no_data;    private EditText searchEditText;    private ProgressBar progress_bar;    private boolean mIsDisplaySelectedOnly;    private RecyclerView recyclerView;    private AdapterOrganizationChart mAdapter;    private List<PersonData> personDatas = new ArrayList<>();    private List<PersonData> personDatasRecycle = new ArrayList<>();    private ArrayList<PersonData> listDepart = new ArrayList<>();    private List<PersonData> listUser = new ArrayList<>();    private ArrayList<PersonData> mPersonList = new ArrayList<>();    private ArrayList<PersonData> mSelectedPersonList = new ArrayList<>();    private ArrayList<PersonData> mSelectedPersonList1 = new ArrayList<>();    private int type;    private LinearLayoutManager mLayoutManager;    public static OrganizationFragment newInstance(ArrayList<PersonData> selectedPerson, int type) {        OrganizationFragment fragmentV2 = new OrganizationFragment();        Bundle data = new Bundle();        data.putParcelableArrayList("selectedPerson", selectedPerson);        data.putInt("KEY_TYPE", type);        fragmentV2.setArguments(data);        return fragmentV2;    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        if (getArguments() != null) {            try {                mSelectedPersonList = getArguments().getParcelableArrayList("selectedPerson");                mSelectedPersonList1.addAll(removeDuplicates(mSelectedPersonList));                mSelectedPersonList.clear();                mSelectedPersonList.addAll(mSelectedPersonList1);                type = getArguments().getInt("KEY_TYPE");            } catch (Exception e) {                e.printStackTrace();            }        }        if (mSelectedPersonList == null) {            mSelectedPersonList = new ArrayList<>();        }        setHasOptionsMenu(true);    }    public void scrollToEndList(int size) {        recyclerView.smoothScrollToPosition(size);    }    public ArrayList<PersonData> removeDuplicates(ArrayList<PersonData> list) {        Set<PersonData> set = new TreeSet((Comparator<PersonData>) (o1, o2) -> {            if (o1.getUserID().equalsIgnoreCase(o2.getUserID())) {                return 0;            }            return 1;        });        set.addAll(list);        final ArrayList newList = new ArrayList(set);        return newList;    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        mView = inflater.inflate(R.layout.fragment_organization, container, false);        sharedPersonTv = mView.findViewById(R.id.shared_person_name);        tvCompany = mView.findViewById(R.id.share_company_btn);        tvSearch = mView.findViewById(R.id.share_search_btn);        text_no_data = mView.findViewById(R.id.text_no_data);        recyclerView = mView.findViewById(R.id.rv);        progress_bar = mView.findViewById(R.id.progress_bar);        mAdapter = new AdapterOrganizationChart(getContext(), personDatas, this, mSelectedPersonList);        mLayoutManager = new LinearLayoutManager(getContext());        mLayoutManager.setAutoMeasureEnabled(false);        mLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);        recyclerView.setLayoutManager(mLayoutManager);        recyclerView.setAdapter(mAdapter);        mAdapter.setOnSelectedEvent(this);        searchEditText = mView.findViewById(R.id.share_search_edit_text);        recyclerView.setVisibility(View.VISIBLE);        tvCompany.setOnClickListener(this);        tvCompany.requestFocus();        tvSearch.setOnClickListener(this);        searchEditText.setOnEditorActionListener((v, actionId, event) -> {            if (actionId == EditorInfo.IME_ACTION_SEARCH) {                handleSearchAction(true);                return true;            }            return false;        });        mView.findViewById(R.id.share_search_action).setOnClickListener(this);        String moddate = new Prefs().getModDate();        HttpRequest.getInstance().getDepartmentMod(moddate, new CheckUpdateDepartmentListener() {            @Override            public void onUpdated(ArrayList<PersonData> lstDepartment, List<PersonData> list) {                if ((lstDepartment != null && lstDepartment.size() > 0) || list != null && list.size() > 0) {                    loadFromServer();                }            }            @Override            public void onFail(String mesage) {            }        });        initWholeOrganizationV4(listDepart, listUser);        return mView;    }    private void initWholeOrganization(final ArrayList<PersonData> lstDepartment, final List<PersonData> dataList) {        progress_bar.setVisibility(View.VISIBLE);        OrganizationUserDBHelper.clearData();        List<PersonData> data;        data = Util.getFromSharedPrefs(getContext());        if (data == null) {            HttpRequest.getInstance().getDepartment(new OnGetAllOfUser() {                @Override                public void onGetAllOfUserSuccess(ArrayList<PersonData> list) {                    String serverLink = HttpRequest.getInstance().sRootLink;                    ArrayList<PersonData> result = OrganizationUserDBHelper.getAllOfOrganization(serverLink);                    Collections.sort(result, (r1, r2) -> {                        if (r1.getSortNo() > r2.getSortNo()) {                            return 1;                        } else if (r1.getSortNo() == r2.getSortNo()) {                            return 0;                        } else {                            return -1;                        }                    });                    mPersonList = new ArrayList<>(result);                    for (PersonData selectedPerson : mSelectedPersonList) {                        int indexOf = mPersonList.indexOf(selectedPerson);                        if (indexOf != -1) {                            mPersonList.get(indexOf).setIsCheck(true);                        }                    }                    createRecursiveList(result, mPersonList);                    personDatas.clear();                    for (PersonData personData : mPersonList) {                        if (personData.getPersonList() != null && personData.getType() != 2 && personData.getDepartmentParentNo() == 0) {                            personDatas.add(personData);                        }                    }                    progress_bar.setVisibility(View.GONE);                    mAdapter.updateList(personDatas, mSelectedPersonList);                    Util.saveToSharedPrefs(getActivity(), personDatas);                    mAdapter.notifyDataSetChanged();                }                @Override                public void onGetAllOfUserFail(ErrorData errorData) {                }            });        } else {            recyclerView.setVisibility(View.VISIBLE);            text_no_data.setVisibility(View.GONE);            mAdapter = new AdapterOrganizationChart(getContext(), personDatas, this, mSelectedPersonList);            LinearLayoutManager mLayoutManager = new LinearLayoutManager(getContext());            mLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);            recyclerView.setLayoutManager(mLayoutManager);            recyclerView.setAdapter(mAdapter);            mAdapter.setOnSelectedEvent(this);            mAdapter.updateList(data, mSelectedPersonList);            mAdapter.notifyDataSetChanged();            progress_bar.setVisibility(View.GONE);        }    }    private void initWholeOrganizationV4(final ArrayList<PersonData> lstDepartment, final List<PersonData> dataList) {        progress_bar.setVisibility(View.VISIBLE);        List<PersonData> data;        data = Util.getFromSharedPrefs(getContext());        if (data == null) {            if (!Util.isNetworkAvailable() || DaZoneApplication.getInstance().offlineMode)                loadData(null);            HttpRequest.getInstance().getDepartment(new OnGetAllOfUser() {                @Override                public void onGetAllOfUserSuccess(ArrayList<PersonData> departments) {                    personDatasRecycle.clear();                    personDatasRecycle.addAll(departments);                    HttpRequest.getInstance().getAllUsersWithBeLongs(new OnGetAllOfUser() {                        @Override                        public void onGetAllOfUserSuccess(ArrayList<PersonData> persons) {                            personDatasRecycle.addAll(persons);                            Collections.sort(personDatasRecycle, (r1, r2) -> {                                if (r1.getSortNo() > r2.getSortNo()) {                                    return 1;                                } else if (r1.getSortNo() == r2.getSortNo()) {                                    return 0;                                } else {                                    return -1;                                }                            });                            putUserToDepartment(departments, persons);                            Util.sortUserAndDepartment(departments);                            Util.saveToSharedPrefs(getActivity(), departments);                            new saveUserBgr().execute();                        }                        @Override                        public void onGetAllOfUserFail(ErrorData errorData) {                        }                    });                }                @Override                public void onGetAllOfUserFail(ErrorData errorData) {                }            });        } else {            Util.sortUserAndDepartment(data);            recyclerView.setVisibility(View.VISIBLE);            text_no_data.setVisibility(View.GONE);            mAdapter = new AdapterOrganizationChart(getContext(), personDatas, this, mSelectedPersonList);            LinearLayoutManager mLayoutManager = new LinearLayoutManager(getContext());            mLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);            recyclerView.setLayoutManager(mLayoutManager);            recyclerView.setAdapter(mAdapter);            mAdapter.setOnSelectedEvent(this);            mAdapter.updateList(data, mSelectedPersonList);            mAdapter.notifyDataSetChanged();            progress_bar.setVisibility(View.GONE);        }    }    private void putUserToDepartment(ArrayList<PersonData> departs, ArrayList<PersonData> users) {        for (PersonData depart : departs) {            if (depart.getPersonList() != null && depart.getPersonList().size() > 0) {                putUserToDepartment(depart.getPersonList(), users);            }            ArrayList<PersonData> members = findUserInDepartment(depart.getDepartNo(), users);            depart.addChildren(members);        }    }    private ArrayList<PersonData> findUserInDepartment(int departNo, ArrayList<PersonData> users) {        ArrayList<PersonData> couldRemoved = new ArrayList<PersonData>();        ArrayList<PersonData> members = new ArrayList<>();        try {            for (PersonData user : users) {                ArrayList<ob_belongs> belongs = user.getBelongsArrayList();                if (belongs != null && belongs.size() > 0) {                    for (ob_belongs depart : belongs) {                        if (depart.getDepartNo() == departNo) {                            members.add(user);                            if (belongs.size() == 1) {                                couldRemoved.add(user);                            }                        }                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }        return members;    }    private void loadData(ArrayList<PersonData> list) {        String serverLink = HttpRequest.sRootLink;        ArrayList<PersonData> result = OrganizationUserDBHelper.getAllOfOrganization(serverLink);        Collections.sort(result, (r1, r2) -> {            if (r1.getSortNo() > r2.getSortNo()) {                return 1;            } else if (r1.getSortNo() == r2.getSortNo()) {                return 0;            } else {                return -1;            }        });        mPersonList = new ArrayList<>(result);        // set selected for list before create recursive list        for (PersonData selectedPerson : mSelectedPersonList) {            int indexOf = mPersonList.indexOf(selectedPerson);            if (indexOf != -1) {                mPersonList.get(indexOf).setIsCheck(true);            }        }        createRecursiveList(result, mPersonList);        personDatas.clear();        for (PersonData personData : mPersonList) {            if (personData.getPersonList() != null && personData.getType() != 2 && personData.getDepartmentParentNo() == 0) {                personDatas.add(personData);            }        }        mAdapter.updateList(personDatas, mSelectedPersonList);        Util.saveToSharedPrefs(DaZoneApplication.getInstance(), personDatas);        progress_bar.setVisibility(View.GONE);        mAdapter.notifyDataSetChanged();    }    private class saveUserBgr extends AsyncTask<Void, Void, Void> {        @Override        protected void onPreExecute() {            super.onPreExecute();        }        @Override        protected Void doInBackground(Void... params) {            int serverSiteId = ServerSiteDBHelper.getServerSiteId(sRootLink);            OrganizationUserDBHelper.clearData();            OrganizationUserDBHelper.addTreeUser(personDatasRecycle, serverSiteId);            return null;        }        @Override        protected void onPostExecute(Void aVoid) {            super.onPostExecute(aVoid);            initWholeOrganization(listDepart, listUser);        }    }    @Override    public void onClick(View v) {        int id = v.getId();        try {            InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);            imm.hideSoftInputFromWindow(searchEditText.getWindowToken(), 0);        } catch (Exception ignored) {        }        switch (id) {            case R.id.share_company_btn:                isSearching = false;                mView.findViewById(R.id.share_search_wrapper).setVisibility(View.GONE);                int sdk = android.os.Build.VERSION.SDK_INT;                if (sdk < android.os.Build.VERSION_CODES.JELLY_BEAN) {                    tvCompany.setBackgroundDrawable(getResources().getDrawable(R.drawable.bg_blue));                    tvSearch.setBackgroundDrawable(getResources().getDrawable(R.drawable.bg_white));                    tvSearch.setTextColor(getResources().getColor(R.color.colorAccent));                    tvCompany.setTextColor(getResources().getColor(R.color.white));                } else {                    tvCompany.setBackgroundDrawable(getResources().getDrawable(R.drawable.bg_blue));                    tvSearch.setBackgroundDrawable(getResources().getDrawable(R.drawable.bg_white));                    tvSearch.setTextColor(getResources().getColor(R.color.colorAccent));                    tvCompany.setTextColor(getResources().getColor(R.color.white));                }                initWholeOrganization(listDepart, listUser);                break;            case R.id.share_search_btn:                mView.findViewById(R.id.share_search_wrapper).setVisibility(View.VISIBLE);                if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.JELLY_BEAN) {                    tvSearch.setBackgroundDrawable(getResources().getDrawable(R.drawable.bg_blue));                    tvCompany.setBackgroundDrawable(getResources().getDrawable(R.drawable.bg_white));                    tvCompany.setTextColor(getResources().getColor(R.color.colorAccent));                    tvSearch.setTextColor(getResources().getColor(R.color.white));                } else {                    tvSearch.setBackgroundDrawable(getResources().getDrawable(R.drawable.bg_blue));                    tvCompany.setBackgroundDrawable(getResources().getDrawable(R.drawable.bg_white));                    tvCompany.setTextColor(getResources().getColor(R.color.colorAccent));                    tvSearch.setTextColor(getResources().getColor(R.color.white));                }                handleSearchAction(false);                break;            case R.id.share_search_action:                handleSearchAction(true);                break;        }    }    @Override    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {        inflater.inflate(R.menu.check_menu, menu);    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case R.id.menu_check:                EventRequest eventRequest = new EventRequest();                eventRequest.setDatas(mSelectedPersonList);                eventRequest.setType(type);                EventBus.getDefault().post(eventRequest);                getActivity().finish();                break;        }        return true;    }    private void handleSearchAction(boolean isCheckRequired) {        String query = searchEditText.getText().toString().trim().toLowerCase();        displayMatchQuery(query);    }    public void displayMatchQuery(String query) {        progress_bar.setVisibility(View.VISIBLE);        ArrayList<PersonData> resultList = new ArrayList<>();        getPersonDataWithQuery(query, resultList, (ArrayList<PersonData>) Util.getFromSharedPrefs(getContext()));        mAdapter = new AdapterOrganizationChart(getContext(), personDatas, this, mSelectedPersonList);        LinearLayoutManager mLayoutManager = new LinearLayoutManager(getContext());        mLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);        recyclerView.setLayoutManager(mLayoutManager);        recyclerView.setAdapter(mAdapter);        mAdapter.setOnSelectedEvent(this);        if (resultList.size() > 0) {            recyclerView.setVisibility(View.VISIBLE);            text_no_data.setVisibility(View.GONE);            mAdapter.updateList(resultList, mSelectedPersonList);            mAdapter.notifyDataSetChanged();        } else {            recyclerView.setVisibility(View.GONE);            text_no_data.setVisibility(View.VISIBLE);        }        Util.hideKeyboard(getActivity());        progress_bar.setVisibility(View.GONE);    }    private void getPersonDataWithQuery(String query, ArrayList<PersonData> searchResultList, ArrayList<PersonData> searchList) {        if (searchList != null) {            for (PersonData personData : searchList) {                if (personData.getType() == 2) {                    if ((personData.getFullName() != null && personData.getFullName().toLowerCase().contains(query))                            || (personData.getEmail() != null && personData.getEmail().toLowerCase().contains(query))) {                        boolean isAdd = true;                        for (PersonData userAdded : searchResultList) {                            if (userAdded.getUserNo() == personData.getUserNo()) {                                isAdd = false;                            }                        }                        if (isAdd) {                            searchResultList.add(personData);                        }                    }                }                if (personData.getPersonList() != null && personData.getPersonList().size() > 0) {                    getPersonDataWithQuery(query, searchResultList, personData.getPersonList());                }            }        }    }    private void unCheckParentData(PersonData personData) {        if (mIsDisplaySelectedOnly) {            PersonData needRemovePerson = null;            for (PersonData selectedPerson : mSelectedPersonList) {                if (personData.getType() == 2 && selectedPerson.getType() == 1 && selectedPerson.getDepartNo() == personData.getDepartNo()) {                    needRemovePerson = selectedPerson;                    break;                } else if (personData.getType() == 1 && selectedPerson.getType() == 1 && selectedPerson.getDepartNo() == personData.getDepartmentParentNo()) {                    needRemovePerson = selectedPerson;                    break;                }            }            if (needRemovePerson != null) {                mSelectedPersonList.remove(needRemovePerson);                if (needRemovePerson.getDepartmentParentNo() > 0) {                    unCheckParentData(needRemovePerson);                }            }        }    }    @Override    public void onOrganizationCheck(boolean isCheck, PersonData personData) {        int indexOf = mSelectedPersonList.indexOf(personData);        if (indexOf != -1) {            if (!isCheck) {                mSelectedPersonList.remove(indexOf);                unCheckParentData(personData);            } else {                mSelectedPersonList.get(indexOf).setIsCheck(true);            }        } else {            if (isCheck) {                mSelectedPersonList.add(personData);            }        }        if (!mIsDisplaySelectedOnly) {            setSelectedPersonName();        }    }    private void setSelectedPersonName() {        String shareString = "";        for (PersonData selectedPerson : mSelectedPersonList) {            if (!TextUtils.isEmpty(shareString)) {                shareString += "; ";            }            shareString += selectedPerson.getFullName();        }        if (TextUtils.isEmpty(shareString)) {            sharedPersonTv.setVisibility(View.GONE);        } else {            sharedPersonTv.setVisibility(View.VISIBLE);            sharedPersonTv.setText(shareString);        }    }    private void loadFromServer() {        HttpRequest.getInstance().getDepartment(new OnGetAllOfUser() {            @Override            public void onGetAllOfUserSuccess(ArrayList<PersonData> departments) {                personDatasRecycle.clear();                personDatasRecycle.addAll(departments);                HttpRequest.getInstance().getAllUsersWithBeLongs(new OnGetAllOfUser() {                    @Override                    public void onGetAllOfUserSuccess(ArrayList<PersonData> persons) {                        personDatasRecycle.addAll(persons);                        Collections.sort(personDatasRecycle, (r1, r2) -> {                            if (r1.getSortNo() > r2.getSortNo()) {                                return 1;                            } else if (r1.getSortNo() == r2.getSortNo()) {                                return 0;                            } else {                                return -1;                            }                        });                        putUserToDepartment(departments, persons);                        Util.sortUserAndDepartment(departments);                        Util.saveToSharedPrefs(getActivity(), departments);                        new saveUserBgr().execute();                    }                    @Override                    public void onGetAllOfUserFail(ErrorData errorData) {                    }                });            }            @Override            public void onGetAllOfUserFail(ErrorData errorData) {                loadData(null);            }        });    }    private void createRecursiveList(ArrayList<PersonData> list, ArrayList<PersonData> parentList) {        Iterator<PersonData> iter = list.iterator();        while (iter.hasNext()) {            PersonData tempPerson = iter.next();            for (PersonData person : parentList) {                if (person.getType() == 1) {                    if (tempPerson.getType() == 1 && person.getDepartNo() == tempPerson.getDepartmentParentNo()) {                        // department compare by departNo and parentNo                        person.addChild(tempPerson);                        iter.remove();                        parentList.remove(tempPerson);                        break;                    } else if (tempPerson.getType() == 2 && person.getDepartNo() == tempPerson.getDepartNo()) {                        // member , compare by departNo and departNo                        person.addChild(tempPerson);                        iter.remove();                        parentList.remove(tempPerson);                        break;                    }                    if (person.getPersonList() != null && person.getPersonList().size() > 0) {                        // not in root list , search in child list                        ArrayList<PersonData> test = new ArrayList<>();                        test.add(tempPerson);                        createRecursiveList(test, person.getPersonList());                    }                }            }        }    }}